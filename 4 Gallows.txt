#include <iostream>
#include <windows.h>
#include <thread>
#include <conio.h>
#include <string>
#include <functional>
#include <vector>
#include <ctime>
#include <chrono>

using namespace std;

void intro_music(); //музыкальное вступление в отдельном потоке
void Intro(); //заставка
void SetColor(int text, int background); //служебная функция для установки цвета шрифта и фона
enum ConsoleColor; //вспомогательный набор для функции выше
void menu(); //игровое меню
void setcur(int x, int y); //установка курсора в заданную позицию, аналог system("cls"), но без мерцания экрана
void new_game(); //новая игра
void rules(); //правила и управление
void gallows(int& tries); //псевдографика виселицы
struct Word
{
    string word;
    string description;
    Word(string word, string description)
    {
        this->word = word;
        this->description = description;
    }
};

int main()
{
    setlocale(0, "");
    srand(time(0));
    system("mode con cols=160 lines=35");
    system("title Виселица");
    Intro();
    menu();
    return 0;
}

void intro_music()
{
    Beep(830.61, 200);
    Beep(739.99, 200);
    Beep(1479.90, 200);
    Beep(830.61, 200);
    Beep(1396.91, 200);
    Beep(830.61, 200);
    Beep(554.37, 200);
    Beep(1108.73, 200);
    Beep(830.61, 200);
    Beep(739.99, 200);
    Beep(1479.98, 200);
    Beep(830.61, 200);
    Beep(1396.91, 200);
    Beep(830.61, 200);
    Beep(554.37, 200);
    Beep(1108.73, 200);
    Beep(830.61, 200);
    Beep(739.99, 200);
    Beep(1479.90, 200);
    Beep(830.61, 200);
    Beep(1396.91, 200);
    Beep(830.61, 200);
    Beep(554.37, 800);
    Beep(415.30, 800);
    Beep(369.99, 800);
    Beep(830.61, 200);
    Beep(739.99, 200);
    Beep(1479.90, 200);
    Beep(830.61, 200);
    Beep(1396.91, 200);
    Beep(830.61, 200);
    Beep(554.37, 200);
    Beep(1108.73, 200);
    Beep(830.61, 200);
    Beep(739.99, 200);
    Beep(1479.98, 200);
    Beep(830.61, 200);
    Beep(1396.91, 200);
    Beep(830.61, 200);
    Beep(554.37, 200);
    Beep(1108.73, 200);
    Beep(830.61, 200);
    Beep(739.99, 200);
    Beep(1479.98, 200);
    Beep(830.61, 200);
    Beep(277.18, 800);
}
void Intro()
{
    system("color 20");
    thread th(intro_music);
    int height = 10, width = 160;
    for (int i = 0; i < width; i++) { cout << "#"; Sleep(10); }
    cout << endl;
    for (int i = 0; i < height / 2; i++)
    {
        for (int j = 0; j < width; j++)
        {
            if (j == 0 || j == width - 1)
                cout << "#";
            else cout << " ";
        }
        cout << endl;
    }
    cout << "#\t\t\t\t\t\t\t\t\t";
    char game_name[] = "В И С Е Л И Ц А\t\t\t\t";
    int i = 0;
    SetColor(1, 2);
    while (game_name[i] != '\0')
    {
        cout << game_name[i];
        Sleep(50);
        i++;
    }
    SetColor(0, 2);
    cout << "\t\t\t\t\t       #";
    cout << endl;
    for (int i = 0; i < height / 2; i++)
    {
        for (int j = 0; j < width; j++)
        {
            if (j == 0 || j == width - 1)
                cout << "#";
            else cout << " ";
        }
        cout << endl;
    }
    for (int i = 0; i < width; i++) { cout << "#"; Sleep(10); }
    cout << "\n\n\n";
    char head1[] = "Экзаменационная работа\n\n\n\n";
    i = 0;
    while (head1[i] != '\0')
    {
        cout << head1[i];
        Sleep(25);
        i++;
    }
    th.detach();
    system("pause");
    system("cls");
}
void SetColor(int text, int background)
{
    HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hStdOut, (WORD)((background << 4) | text));
}
enum ConsoleColor
{
    Black = 0,
    Blue = 1,
    Green = 2,
    Cyan = 3,
    Red = 4,
    Magenta = 5,
    Brown = 6,
    LightGray = 7,
    DarkGray = 8,
    LightBlue = 9,
    LightGreen = 10,
    LightCyan = 11,
    LightRed = 12,
    LightMagenta = 13,
    Yellow = 14,
    White = 15
};
void setcur(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
};
void menu()
{
    system("cls");
    bool choice = true;
    function <void()> f;
    int x = 7, y = 39;
    //cin.ignore();
    while (choice)
    {
        setcur(0, 0);
        for (size_t i = 0; i < 20; i++)
        {
            for (size_t j = 0; j < 100; j++)
            {
                if (i == x && j == y) cout << ">";
                else if (i == 5 && j == 45) cout << "Меню:";
                else if (i == 7 && j == 41) cout << "Новая игра";
                else if (i == 8 && j == 41) cout << "Правила";
                else if (i == 9 && j == 41) cout << "Выход";
                else cout << " ";
            }
            cout << endl;
        }
        switch (_getch())
        {
        case 119: if (x > 7) x--;
            break;
        case 87: if (x > 7) x--;
            break;
        case 230: if (x > 7) x--;
            break;
        case 150: if (x > 7) x--;
            break;
        case 155: if (x < 9) x++;
            break;
        case 235: if (x < 9) x++;
            break;
        case 83: if (x < 9) x++;
            break;
        case 115: if (x < 9) x++;
            break;
        case 13:
            if (x == 7) f = new_game;
            else if (x == 8) f = rules;
            else if (x == 9) { choice = false; break; }
            system("cls");
            f();
            break;
        }
    }
}
void new_game()
{
    system("cls");
    chrono::time_point<chrono::steady_clock> start, end;
    start = chrono::high_resolution_clock::now();
    Word w0("кастомизация", "процесс настройки функциональности программного продукта под требования конечного потребителя");
    Word w1("рекурсия", "конструкция программного кода, при которой функция вызывает саму себя");
    Word w2("интерфейс", "набор средств и методов, с помощью которых пользователь имеет возможность взаимодействовать со сложными программами, устройствами, сайтами");
    Word w3("велосипед", "код, написанный самостоятельно программистом, который уже имеется в стандартных библиотеках");
    Word w4("аноним", "человек, скрывающий своё настоящее имя");
    Word w5("апгрейд", "обновление/модернизация аппаратного обеспечения (железа)");
    Word w6("апдейт", "обновление/модернизация программного обеспечения (софта)");
    Word w7("аутсорс", "передача предприятием/компанией выполнение определенной работы специалистам вне штата (фрилансерам или работникам других компаний)");
    Word w8("баг", "ошибка в программе/коде, из-за которой результаты выполнения программы неправильные");
    Word w9("багрепорт", "сообщение или отчёт об ошибке с её описанием, причиной возникновения, приоритетом и прочими свойствами");
    Word w10("бан", "лишение или ограничение каких-либо прав пользователя");
    Word w11("баян", "шутка/информация, которая ранее уже была опубликована/известна");
    Word w12("биткоин", "криптовалюта, электронная валюта, поколение цифровых денег, которые никем не контролируются и существуют только в Интернете");
    Word w13("блокчейн", "система учёта проводимых транзакций с криптовалютой");
    Word w14("болванка", "чистый, не записанный, компакт-диск");
    Word w15("браузер", "программа, с помощью которой можно просматривать веб-страницы или, другими словами, выходить в Интернет");
    Word w16("бэкап", "резервное копирование. Создание резервной копии проекта/сайта/данных,\nчтобы в случае непредвиденных обстоятельств/сбоя можно было бы вернуть всю систему в прежнее состояние");
    Word w17("бэкенд", "разработка «внутренней части» сайтов/программ/приложений");
    Word w18("вебинар", "это семинар, презентация или лекция на определённую тему, которая проходит онлайн, в режиме реального времени, в Интернете");
    Word w19("галера", "компания/предприятие/организация, в которой трудится программист");
    Word w20("геймдев", "разработка/создание игр");
    Word w21("геймер", "игрок");
    Word w22("гик", "человек, который хорошо разбирается в определённой сфере деятельности, являясь фанатиком своего дела");
    Word w23("глюк", "непонятный сбой, задержка, торможение процессов в программе/игре");
    Word w24("говнокод", "плохой код, в котором сложно разобраться и который сложно поддерживать/модифицировать/изменять");
    Word w25("говнокодер", "человек, который пишет говнокод");
    Word w26("гребцы", "работники галеры (компании)");
    Word w27("девайс", "техническое устройство (ноутбук/смартфон/планшет/умные часы и т.д.)");
    Word w28("дедлайн", "крайний срок выполнения или сдачи проекта/задания/работы");
    Word w29("деплой", "это развёртывание (перенос) программного обеспечения (исполняемого кода) на сервер или устройство, где оно будет работать");
    Word w30("джуниор", "начальный уровень программиста. Человек, имеющий минимальный опыт и навыки");
    Word w31("домен", "уникальный адрес/имя сайта в Интернете");
    Word w32("дрова", "драйверы");
    Word w33("железо", "аппаратное обеспечение (комплектующие) компьютеров/ноутбуков/смартфонов и т.д.");
    Word w34("кирпич", "неработающее устройство (например, телефон)");
    Word w35("клава", "клавиатура");
    Word w36("коворкинг", "место для организации труда специалистами одной или сразу нескольких сфер деятельности, фрилансеров");
    Word w37("кодер", "программист");
    Word w38("компиляция", "конвертация кода, написанного на высокоуровневом языке, в исполняемую программу, которую процессор понимает напрямую");
    Word w39("компилятор", "программа, которая выполняет компиляцию");
    Word w40("костыль", "исправление серьезных багов/дыр/ошибок без должного исправления целой системы.\nТ.е. решение на коленке в кратчайшие сроки в ущерб эффективности и хорошим практикам программирования");
    Word w41("кракозябры", "набор непонятных символов, бессмыслица. Возникает в результате неправильной кодировки");
    Word w42("кряк", "специальная программа или дополнение к программе для взлома другого программного обеспечения.\nВ основном используется для превращения лицензионной (платной) версии чего-либо (программы/игры) в бесплатную");
    Word w43("кулхацкер", "человек, считающий себя хакером или опытным программистом, не являясь таковым в реальной жизни");
    Word w44("лаг", "задержка в выполнении программы/игры, отсутствие реагирования на действия пользователя");
    Word w45("лайфхак", "полезный совет, помогающий решить какую-то проблему с экономией времени/усилий");
    Word w46("ламер", "неопытный пользователь, человек, который не разбирается в чём-то, но думает, что разбирается");
    Word w47("лог", "журнал, в котором записываются в хронологическом порядке все выполненные действия в чём-либо (в программе, на сервере)");
    Word w48("локалка", "локальная сеть компьютеров, соединённых кабелями");
    Word w49("лэптоп", "ноутбук");
    Word w50("майнинг", "добыча криптовалюты, путём выполнения компьютером сложных математических операций");
    Word w51("мануал", "руководство, инструкция по использованию чего-либо");
    Word w52("ментор", "наставник/учитель");
    Word w53("мидл", "средний уровень знаний и навыков программиста");
    Word w54("мыло", "адрес электронной почты, E-mail пользователя");
    Word w55("ноулайфер", "человек, который большинство своего времени проводит за компьютером/ноутбуком/смартфоном в виртуальном мире (Интернет/соц.сети/игры).\nЧеловек, не имеющий личной жизни, хобби или каких-либо других занятий в реальном мире");
    Word w56("нуб", "новичок или человек у которого ничего не получается, или он не знает, как правильно что-то сделать");
    Word w57("овертайм", "переработка после окончания рабочего дня. Сверхурочные часы");
    Word w58("ооп", "методология/парадигма программирования, в которой основными концепциями являются объекты и классы");
    Word w59("опенсорс", "программное обеспечение/софт с открытым исходным кодом, который может использовать/дополнять/изменять любой желающий");
    Word w60("опенспейс", "офис открытого типа, где сотрудники работают в одном помещении (относительно большом) без каких-либо перегородок/стен");
    Word w61("отладка", "этап в разработке программного обеспечения, на котором выполняется поиск и исправление ошибок");
    Word w62("отладчик", "программа, с помощью которой выполняется отладка");
    Word w63("оффтоп", "любое сообщение мимо кассы (т.е. не по теме)");
    Word w64("патч", "дополнение или обновление, которое исправляет ошибки/баги/глюки");
    Word w65("песочница", "специальная область/среда для безопасного выполнения программы");
    Word w66("подкаст", "видео или аудио уроки, рассказы на определённую тему, чаще всего образовательного характера");
    Word w67("пост", "запись/статья/информационная заметка");
    Word w68("свитчер", "человек, который перешёл работать в IT/программирование из другой профессии");
    Word w69("сеньор", "высокий уровень знаний и навыков специалиста. Опытный программист");
    Word w70("скрипт", "это программный файл сценария (кусок кода), который автоматизирует некоторую задачу, которую пользователь делал бы вручную");
    Word w71("смузи", "любимый напиток программистов/айтишников (сарказм)");
    Word w72("сниппет", "фрагмент/кусочек текста/кода/чего-либо");
    Word w73("софт", "программное обеспечение, программа");
    Word w74("спам", "электронные письма/сообщения рекламного и иного характера пользователям, не желающих и не согласившихся их получать");
    Word w75("спрайт", "графический объект в компьютерной графике");
    Word w76("стрим", "трансляция действий, происходящих на компьютере (или в реальной жизни) в режиме реального времени");
    Word w77("тимлид", "ведущий разработчик, лидер команды программистов");
    Word w78("трейни", "стажёр, работник, который не дотягивает до уровня Junior-специалиста");
    Word w79("туториал", "сборник уроков для обучения чему-либо, учебник");
    Word w80("утилита", "вспомогательное программное обеспечение, предназначенное для выполнения вспомогательных работ,\nнастройки системного оборудования, операционных систем и прочего");
    Word w81("фидбек", "обратная связь");
    Word w82("фича", "особенность, уникальная возможность, свойство");
    Word w83("флейм", "спор ради спора, когда пользователи начинают общение не по теме разговора/дискуссии и переходят на личностные и взаимные оскорбления");
    Word w84("флуд", "сообщения/комментарии не по теме");
    Word w85("фреймворк", "программный продукт/система/платформа, основная цель которой — облегчение/упрощение создания\nи поддержки разного рода проектов/приложений/сервисов/сайтов");
    Word w86("фриланс", "работа из дому, вне штата, иногда на себя, которая приносит деньги и в которой нет постоянного заказчика/начальника");
    Word w87("фрилансер", "человек, который занимается фрилансом");
    Word w88("фронтенд", "разработка «внешнего вида» сайта, клиентская часть");
    Word w89("хакатон", "мероприятие, на котором собираются специалисты из разных отраслей разработки программного обеспечения\n(чаще всего программисты, но могут быть и дизайнеры, тестеры) для разработки определённого решения/проекта/приложения/программы");
    Word w90("холивар", "споры между людьми, которые имеют противоположные взгляды и пытаются навязать их друг другу");
    Word w91("чайник", "новичок, неопытный пользователь");
    Word w92("челлендж", "вызов или проблема (зачастую нетривиальная), с которой ранее не сталкивались");
    Word w93("эксплойт", "вредоносная программа, способная выполнять свой код через найденную уязвимость в другой программе");
    Word w94("эникейщик", "низкоквалифицированный IT-специалист, который занимается рутинными, несложными заданиями");
    Word w95("кеды", "среда рабочего стола KDE Plasma");
    Word w96("артефакт", "вспомогательный (как правило, созданный в процессе исполнения программного обеспечения) элемент продукта, так или иначе входящий в его состав");
    Word w97("исходник", "файлы, в которых находится исходный код приложения, или сам исходный код");
    Word w98("падаван", "ироничное название стажёра или джуниора");
    Word w99("алгоритм", "порядок действий, которые необходимо выполнить для решения определенной задачи");

    vector<Word> v =
    {
        w0, w1, w2, w3, w4, w5, w6, w7, w8, w9,
        w10, w11, w12, w13, w14, w15, w16, w17, w18, w19,
        w20, w21, w22, w23, w24, w25, w26, w27, w28, w29,
        w30, w31, w32, w33, w34, w35, w36, w37, w38, w39,
        w40, w41, w42, w43, w44, w45, w46, w47, w48, w49,
        w50, w51, w52, w53, w54, w55, w56, w57, w58, w59,
        w60, w61, w62, w63, w64, w65, w66, w67, w68, w69,
        w70, w71, w72, w73, w74, w75, w76, w77, w78, w79,
        w80, w81, w82, w83, w84, w85, w86, w87, w88, w89,
        w90, w91, w92, w93, w94, w95, w96, w97, w98, w99,
    };
    int num = rand() % v.size();
    string str = v[num].word;
    for (size_t i = 0; i < str.length(); i++)
    {
        str[i] = ' ';
    }
    char tmp;
    int x = 1, y = 1;
    bool choice = true;
    vector<char> alfabet = { 'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж','З','И', 'Й','К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я', };
    int tries = 6, str_count = str.length();
    while (choice)
    {
        system("cls");
        cout << "Подсказка: ";
        cout << v[num].description << endl;
        SetColor(15, 1);
        cout << "\n\n\n\t\t\t|";
        for (size_t i = 0; i < str.length(); i++)
        {
            cout << str[i] << '|';
        }
        SetColor(0, 2);
        cout << "\n\n\n";
        for (auto& i : alfabet) cout << " " << i;
        for (size_t i = 0; i < 2; i++)
        {
            for (size_t j = 0; j < 66; j++)
            {
                if (i == x && j == y) cout << "^";

                else cout << " ";
            }
            cout << endl;
        }
        cout << "\n";
        gallows(tries);
        if (!str_count)
        {
            cout << "\nПоздравляю! Вы выиграли!\n";
            end = chrono::high_resolution_clock::now();
            chrono::duration<float> duration = end - start;
            cout << "\nЗатраченное время: " << duration.count() << " секунд" << endl;
            system("pause");
            break;
        }
        if (!tries)
        {
            cout << "\nВы проиграли!\n";
            end = chrono::high_resolution_clock::now();
            chrono::duration<float> duration = end - start;
            cout << "\nЗатраченное время: " << duration.count() << " секунд" << endl;
            system("pause");
            break;
        }
        switch (_getch())
        {
        case 97: if (y > 1) y -= 2;
            break;
        case 228: if (y > 1) y -= 2;
            break;
        case 148: if (y > 1) y -= 2;
            break;
        case 65: if (y > 1) y -= 2;
            break;
        case 100: if (y < 64) y += 2;
            break;
        case 68: if (y < 64) y += 2;
            break;
        case 162: if (y < 64) y += 2;
            break;
        case 130: if (y < 64) y += 2;
            break;
        case 13:
            int it;
            if (y == 1) { tmp = 'а'; it = 0; }
            else if (y == 3) { tmp = 'б'; it = 1; }
            else if (y == 5) { tmp = 'в'; it = 2; }
            else if (y == 7) { tmp = 'г'; it = 3; }
            else if (y == 9) { tmp = 'д'; it = 4; }
            else if (y == 11) { tmp = 'е'; it = 5; }
            else if (y == 13) { tmp = 'ё'; it = 6; }
            else if (y == 15) { tmp = 'ж'; it = 7; }
            else if (y == 17) { tmp = 'з'; it = 8; }
            else if (y == 19) { tmp = 'и'; it = 9; }
            else if (y == 21) { tmp = 'й'; it = 10; }
            else if (y == 23) { tmp = 'к'; it = 11; }
            else if (y == 25) { tmp = 'л'; it = 12; }
            else if (y == 27) { tmp = 'м'; it = 13; }
            else if (y == 29) { tmp = 'н'; it = 14; }
            else if (y == 31) { tmp = 'о'; it = 15; }
            else if (y == 33) { tmp = 'п'; it = 16; }
            else if (y == 35) { tmp = 'р'; it = 17; }
            else if (y == 37) { tmp = 'с'; it = 18; }
            else if (y == 39) { tmp = 'т'; it = 19; }
            else if (y == 41) { tmp = 'у'; it = 20; }
            else if (y == 43) { tmp = 'ф'; it = 21; }
            else if (y == 45) { tmp = 'х'; it = 22; }
            else if (y == 47) { tmp = 'ц'; it = 23; }
            else if (y == 49) { tmp = 'ч'; it = 24; }
            else if (y == 51) { tmp = 'ш'; it = 25; }
            else if (y == 53) { tmp = 'щ'; it = 26; }
            else if (y == 55) { tmp = 'ъ'; it = 27; }
            else if (y == 57) { tmp = 'ы'; it = 28; }
            else if (y == 59) { tmp = 'ь'; it = 29; }
            else if (y == 61) { tmp = 'э'; it = 30; }
            else if (y == 63) { tmp = 'ю'; it = 31; }
            else if (y == 65) { tmp = 'я'; it = 32; }
            if (alfabet[it] == ' ') continue;
            bool letter_checking = 'true';
            for (size_t i = 0; i < v[num].word.length(); i++)
            {
                if (v[num].word[i] == tmp)
                {
                    cout << "Есть такая буква!\n";
                    str[i] = tmp;
                    --str_count;
                    letter_checking = false;
                    Sleep(500);
                }
            }
            if (letter_checking)
            {
                cout << "В слове нет такой буквы!\n";
                --tries;
                Sleep(500);
            }
            alfabet[it] = ' ';
            break;
        }
    }
    system("cls");
}
void rules()
{
    system("cls");
    cout << "Управление осуществляется с помощью клавиш wasd независимо от раскладки и Caps Lock-a\n";
    cout << "Вам необходимо отгадать загаданное слово. У вас есть шесть попыток. Удачи!\n\n\n";
    system("pause");
}
void gallows(int& tries)
{
    if (tries == 6)
    {
        cout << "\t\t\t  _____________\n";
        cout << "\t\t\t          \\  |\n";
        cout << "\t\t\t           \\ |\n";
        cout << "\t\t\t            \\|\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t--------------------/ \\-------------------\n\n";
    }
    else if (tries == 5)
    {
        cout << "\t\t\t  _____________\n";
        cout << "\t\t\t    |     \\  |\n";
        cout << "\t\t\t    |      \\ |\n";
        cout << "\t\t\t  (o_o)     \\|\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t--------------------/ \\-------------------\n\n";
    }
    else if (tries == 4)
    {
        cout << "\t\t\t  _____________\n";
        cout << "\t\t\t    |     \\  |\n";
        cout << "\t\t\t    |      \\ |\n";
        cout << "\t\t\t  (O_o)     \\|\n";
        cout << "\t\t\t  |   |      |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t--------------------/ \\-------------------\n\n";
    }
    else if (tries == 3)
    {
        cout << "\t\t\t  _____________\n";
        cout << "\t\t\t    |     \\  |\n";
        cout << "\t\t\t    |      \\ |\n";
        cout << "\t\t\t  (O_O)     \\|\n";
        cout << "\t\t\t (|   |      |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t--------------------/ \\-------------------\n\n";
    }
    else if (tries == 2)
    {
        cout << "\t\t\t  _____________\n";
        cout << "\t\t\t    |     \\  |\n";
        cout << "\t\t\t    |      \\ |\n";
        cout << "\t\t\t  (-_-)     \\|\n";
        cout << "\t\t\t (|   |)     |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t--------------------/ \\-------------------\n\n";
    }
    else if (tries == 1)
    {
        cout << "\t\t\t  _____________\n";
        cout << "\t\t\t    |     \\  |\n";
        cout << "\t\t\t    |      \\ |\n";
        cout << "\t\t\t  (т_т)     \\|\n";
        cout << "\t\t\t (|   |)     |\n";
        cout << "\t\t\t  _|         |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t--------------------/ \\-------------------\n\n";
    }
    else if (tries == 0)
    {
        cout << "\t\t\t  _____________\n";
        cout << "\t\t\t    |     \\  |\n";
        cout << "\t\t\t    |      \\ |\n";
        cout << "\t\t\t  (х_х)     \\|\n";
        cout << "\t\t\t (|   |)     |\n";
        cout << "\t\t\t  _| |_      |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t\t             |\n";
        cout << "\t\t--------------------/ \\-------------------\n\n";
    }
}
